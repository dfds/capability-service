apiVersion: apps/v1
kind: Deployment
metadata:
  name: capability-service
  namespace: selfservice
  labels:
    project: selfservice
    department: devex
    app: capability-service
    component: capability-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: capability-service
  template:
    metadata:
      labels:
        app: capability-service
        project: selfservice
        department: devex
        logging_dfds_cloud_format_json: "true"
      annotations:
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
    spec:
      priorityClassName: selfservice
      initContainers:
        - name: dbmigrations
          image: 579478677147.dkr.ecr.eu-central-1.amazonaws.com/ded/capability-service/dbmigrations:${BUILD_BUILDID}
          envFrom:
            - secretRef:
                name: capability-service-db

      containers:
        - name: capability-service
          image: 579478677147.dkr.ecr.eu-central-1.amazonaws.com/ded/capability-service:${BUILD_BUILDID}
          ports:
            - containerPort: 80
              name: web
            - containerPort: 8080
              name: metrics
          resources:
            requests:
              memory: "300Mi"
              cpu: "100m"
            limits:
              memory: "500Mi"
              cpu: "200m"
          env:
            - name: CAPABILITYSERVICE_DATABASE_CONNECTIONSTRING
              valueFrom:
                secretKeyRef:
                  name: capability-service-db
                  key: connection-string
            - name: CAPABILITY_SERVICE_BASIC_AUTH_USER_AND_PASS
              valueFrom:
                secretKeyRef:
                  name: capabilityservice-basic-authentication-credentials
                  key: auth
            - name: CAPABILITY_SERVICE_KAFKA_BOOTSTRAP_SERVERS
              value: "pkc-e8wrm.eu-central-1.aws.confluent.cloud:9092"
            - name: CAPABILITY_SERVICE_KAFKA_BROKER_VERSION_FALLBACK
              value: "0.10.0.0"
            - name: CAPABILITY_SERVICE_KAFKA_API_VERSION_FALLBACK_MS
              value: "0"
            - name: CAPABILITY_SERVICE_KAFKA_SASL_USERNAME
              valueFrom:
                secretKeyRef:
                  name: capabilityservice-kafka-credentials
                  key: username
            - name: CAPABILITY_SERVICE_KAFKA_SASL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: capabilityservice-kafka-credentials
                  key: password
            - name: CAPABILITY_SERVICE_KAFKA_SASL_MECHANISMS
              value: "PLAIN"
            - name: CAPABILITY_SERVICE_KAFKA_SECURITY_PROTOCOL
              value: "SASL_SSL"
            - name: CAPABILITY_SERVICE_KAFKA_GROUP_ID
              value: "build.selfservice.capability-service-consumer"
            - name: CAPABILITY_SERVICE_KAFKA_ENABLE_AUTO_COMMIT
              value: "false"
            - name: CAPABILITY_SERVICE_KAFKA_TOPIC_CAPABILITY
              value: "build.selfservice.events.capabilities"
            - name: CAPABILITY_SERVICE_KAFKA_TOPIC_TOPICS
              value: "build.selfservice.events.topics"
            - name: CAPABILITY_SERVICE_KAFKA_TOPIC_SELF_SERVICE
              value: "cloudengineering.selfservice.kafkatopic"
            - name: CAPABILITY_SERVICE_KAFKA_TOPIC_CONFLUENT
              value: "cloudengineering.confluentgateway.provisioning"
            - name: DOTNET_USE_POLLING_FILE_WATCHER
              value: "true"
            - name: KAFKAJANITOR_API_ENDPOINT
              value: "http://kafka-janitor"
            - name: DD_AGENT_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: DD_TRACE_GLOBAL_TAGS
              value: "Service:capability-service"
            - name: DD_LOGS_INJECTION
              value: "true"
            - name: DD_TRACE_ANALYTICS_ENABLED
              value: "true"
          livenessProbe:
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 5
            httpGet:
              port: web
              path: /healthz
          readinessProbe:
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            httpGet:
              port: web
              path: /healthz
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dafda-gendis-test
  namespace: selfservice
  labels:
    project: selfservice
    department: devex
    app: capability-service-gendis
    component: capability-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: capability-service-gendis
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5225"
      labels:
        app: capability-service-gendis
        project: selfservice
        department: devex
    spec:
      containers:
        - name: app
          image: public.ecr.aws/d8r0z9h2/dafda-gendis:0.9.1
          ports:
            - name: metrics
              containerPort: 5225
          env:
            - name: DAFDA_OUTBOX_NOTIFICATION_CHANNEL
              value: dafda_outbox
            - name: GENDIS_PREFIX_FOR_KAFKA
              value: SELFSERVICE_KAFKA_
            - name: DB_CONNECTION_STRING
              valueFrom:
                secretKeyRef:
                  name: capability-service-db
                  key: connection-string
          envFrom:
            - secretRef:
                name: kafka-credentials
          resources:
            requests:
              memory: "50Mi"
              cpu: "50m"
            limits:
              memory: "200Mi"
              cpu: "200m"