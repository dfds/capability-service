swagger: '2.0'
info:
  version: 0.0.1
  title: Capability Service
  description: The authority of all things CAPABILITY related!
consumes:
  - application/json
produces:
  - application/json
schemes: 
  - http
host: localhost:5000
basePath: /api/v1/
tags:
  - name: capability
    description: access single or multiple capabilities
  - name: membership
    description: start and stop memberships for members
  - name: context
    description: access to capability contexts
  - name: topic
    description: manage topics for a capability
paths:
  /capabilities: 
    get:
      summary: Returns a list of capabilities
      tags:
        - capability
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/capability-list'
    post:
      summary: Create a new capability
      tags:
        - capability
      parameters: 
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
      responses:
        201:
          description: Created
          headers:
            location:
              type: string
              description: URI where the capability can be retrieved
          schema:
            $ref: '#/definitions/capability'
        400:
          description: BadRequest
          schema:
            $ref: '#/definitions/errorObject'
  /capabilities/{capabilityId}:
    get:
      summary: Returns a single capability
      tags:
        - capability
      parameters:
        - in: path
          name: capabilityId
          type: string
          required: true
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/capability-details'
    put:
      summary: Update the info fields on a single capability
      tags:
        - capability
      parameters:
        - in: path
          name: capabilityId
          type: string
          required: true
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/capability'
        400:
          description: BadRequest
          schema:
            $ref: '#/definitions/errorObject'
        404:
          description: Not found
  /capabilities/{capabilityId}/members:
    post:
      summary: Adds a person to a capability 
      tags:
        - membership
      parameters:
        - in: path
          name: capabilityId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
      responses:
        200:
          description: Ok
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/errorObject'
  /capabilities/{capabilityId}/members/{email}:
    delete:
      summary: Deletes a person from a capability 
      tags:
        - membership
      parameters:
        - in: path
          name: capabilityId
          required: true
          type: string
        - in: path
          name: email
          type: string
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Not Found
  /capability-retirement/:
    post:
      summary: starts the process of retiring a capability
      tags:
        - capability-retirement
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              capabilityId:
                type: string
      responses:
        201:
          description: Created
          headers:
            location:
              type: string
              description: URI where the state of the retirement process can be retrieved
        404:
          description: A capability with the given id not found
          schema:
            $ref: '#/definitions/errorObject'
  /capability-retirement/{capabilityRetirementId}:
    get:
      summary: Gets the status of a retirement process
      tags:
        - capability-retirement
      parameters:
        - in: path
          name: capabilityRetirementId
          type: string
          required: true
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/retirementProcess'
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/errorObject'
  /capabilities/{capabilityId}/contexts:
    post:
      summary: Adds a context to a capability 
      tags:
        - context
      parameters:
        - in: path
          name: capabilityId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        200:
          description: Ok
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/errorObject'
  /capabilities/{capabilityId}/topics:
    post:
      summary: Adds a topic to a capability 
      tags:
        - topic
      parameters:
        - in: path
          name: capabilityId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              isPrivate:
                type: boolean
      responses:
        200:
          description: Ok
        404:
          description: Not Found
          schema:
            $ref: '#/definitions/errorObject'
  /topics:
    get:
      summary: Returns a list of all topics
      tags:
        - topic
      responses:
        200:
          description: Ok
          schema:
            type: object
            properties:
              items:
                type: array
                items: 
                  $ref: '#/definitions/topic'
  /topics/{topicId}:
    get:
      summary: Returns a single topic
      tags:
        - topic
      parameters:
        - in: query
          name: topicId
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/topic'
        404:
          description: Not Found
    put:
      summary: Updates a single topic
      tags:
        - topic
      parameters:
        - in: query
          name: topicId
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              description:
                type: string
              isPrivate:
                type: boolean
      responses:
        204:
          description: No Content
          # schema:
          #   $ref: '#/definitions/topic'
        400:
          description: Bad Request
        404:
          description: Not Found
  /topics/{topicId}/messageContracts:
    get:
      summary: Returns all message contracts for a single topic
      tags:
        - topic
      parameters:
        - in: query
          name: topicId
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/messageContract'
        404:
          description: Not Found
  /topics/{topicId}/messageContracts/{type}:
    put:
      summary: Adds or updates a message contract on a single topic
      tags:
        - topic
      parameters:
        - in: query
          name: topicId
          required: true
          type: string
        - in: query
          name: type
          required: true
          type: string
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              description:
                type: string
              content:
                type: string
      responses:
        204:
          description: No Content
        404:
          description: Not Found
    delete:
      summary: Deletes a message contracts from a topic
      tags:
        - topic
      parameters:
        - in: query
          name: topicId
          required: true
          type: string
        - in: query
          name: type
          required: true
          type: string
      responses:
        200:
          description: OK
        404:
          description: Not Found
definitions:
  capability-list:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/capability'
  capability:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      rootId:
        type: string
      members:
        type: array
        items:
          $ref: '#/definitions/member'
      contexts:
        type: array
        items:
          $ref: '#/definitions/context'
  capability-details:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      rootId:
        type: string
      members:
        type: array
        items:
          $ref: '#/definitions/member'
      contexts:
        type: array
        items:
          $ref: '#/definitions/context'
      topics:
        type: array
        items:
          $ref: '#/definitions/topic'
  member:
    type: object
    properties:
      email:
        type: string
  context:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      awsAccountId:
        type: string
      awsRoleArn:
        type: string
      awsRoleEmail:
        type: string
  errorObject:
    type: object
    properties:
      message:
        type: string
  topic:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      description:
        type: string
      isPrivate:
        type: boolean
      messageContracts:
        type: array
        items:
          $ref: '#/definitions/messageContract'
  messageContract:
    type: object
    properties:
      type:
        type: string
      description:
        type: string
      content:
        type: string
  retirementProcess:
    type: object
    properties:
      id:
        type: string
      status:
        type: string
        enum:
        - pending
        - processing
        - completed